import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testVariantsAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    const productWithVariants = await prisma.product.findFirst({
      where: {
        variants: {
          some: {}
        }
      },
      include: {
        variants: true
      }
    });

    if (!productWithVariants) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç.');
      return;
    }

    console.log(`üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: ${productWithVariants.title}`);
    console.log(`   Slug: ${productWithVariants.slug}`);
    console.log(`   –í–∞—Ä–∏–∞—Ü–∏–π: ${productWithVariants.variants.length}`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:');
    
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const productUrl = `${baseUrl}/api/products/${productWithVariants.slug}`;
    
    try {
      const productResponse = await fetch(productUrl);
      const productData = await productResponse.json();
      
      if (productData.success) {
        console.log('‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${productData.data.title}`);
        console.log(`   –í–∞—Ä–∏–∞—Ü–∏–π: ${productData.data.variants?.length || 0}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', productData.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏
    console.log('\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏:');
    
    const variants = productWithVariants.variants;
    if (variants.length > 0) {
      const testVariant = variants[0];
      const variantUrl = `${baseUrl}/api/products/${productWithVariants.slug}/variant`;
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ü–≤–µ—Ç–æ–º
      if (testVariant.color) {
        try {
          const colorUrl = `${variantUrl}?color=${encodeURIComponent(testVariant.color)}`;
          const colorResponse = await fetch(colorUrl);
          const colorData = await colorResponse.json();
          
          if (colorData.success) {
            console.log(`‚úÖ –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–º "${testVariant.color}" –Ω–∞–π–¥–µ–Ω–∞`);
            console.log(`   –¶–µ–Ω–∞: ${colorData.data.price} —Ä—É–±.`);
            console.log(`   –°–∫–ª–∞–¥: ${colorData.data.stock} —à—Ç.`);
          } else {
            console.log(`‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–º "${testVariant.color}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç—É:', error);
        }
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º
      if (testVariant.size) {
        try {
          const sizeUrl = `${variantUrl}?size=${encodeURIComponent(testVariant.size)}`;
          const sizeResponse = await fetch(sizeUrl);
          const sizeData = await sizeResponse.json();
          
          if (sizeData.success) {
            console.log(`‚úÖ –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–æ–º "${testVariant.size}" –Ω–∞–π–¥–µ–Ω–∞`);
            console.log(`   –¶–µ–Ω–∞: ${sizeData.data.price} —Ä—É–±.`);
            console.log(`   –°–∫–ª–∞–¥: ${sizeData.data.stock} —à—Ç.`);
          } else {
            console.log(`‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–æ–º "${testVariant.size}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É:', error);
        }
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ü–≤–µ—Ç–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º
      if (testVariant.color && testVariant.size) {
        try {
          const fullUrl = `${variantUrl}?color=${encodeURIComponent(testVariant.color)}&size=${encodeURIComponent(testVariant.size)}`;
          const fullResponse = await fetch(fullUrl);
          const fullData = await fullResponse.json();
          
          if (fullData.success) {
            console.log(`‚úÖ –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–º "${testVariant.color}" –∏ —Ä–∞–∑–º–µ—Ä–æ–º "${testVariant.size}" –Ω–∞–π–¥–µ–Ω–∞`);
            console.log(`   –¶–µ–Ω–∞: ${fullData.data.price} —Ä—É–±.`);
            console.log(`   –°–∫–ª–∞–¥: ${fullData.data.stock} —à—Ç.`);
            console.log(`   SKU: ${fullData.data.sku}`);
          } else {
            console.log(`‚ùå –í–∞—Ä–∏–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–º "${testVariant.color}" –∏ —Ä–∞–∑–º–µ—Ä–æ–º "${testVariant.size}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏:', error);
        }
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    console.log('\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:');
    
    try {
      const invalidUrl = `${baseUrl}/api/products/${productWithVariants.slug}/variant?color=–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–¶–≤–µ—Ç&size=–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–†–∞–∑–º–µ—Ä`;
      const invalidResponse = await fetch(invalidUrl);
      const invalidData = await invalidResponse.json();
      
      if (!invalidData.success) {
        console.log('‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      } else {
        console.log('‚ùå –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏:', error);
    }

    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–π:');
    
    const totalVariants = await prisma.productVariant.count();
    const activeVariants = await prisma.productVariant.count({
      where: { isActive: true }
    });
    const variantsWithStock = await prisma.productVariant.count({
      where: { stock: { gt: 0 } }
    });
    const variantsWithColor = await prisma.productVariant.count({
      where: { color: { not: null } }
    });
    const variantsWithSize = await prisma.productVariant.count({
      where: { size: { not: null } }
    });

    console.log(`   –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariants}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeVariants}`);
    console.log(`   –í –Ω–∞–ª–∏—á–∏–∏: ${variantsWithStock}`);
    console.log(`   –° —Ü–≤–µ—Ç–æ–º: ${variantsWithColor}`);
    console.log(`   –° —Ä–∞–∑–º–µ—Ä–æ–º: ${variantsWithSize}`);

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testVariantsAPI();